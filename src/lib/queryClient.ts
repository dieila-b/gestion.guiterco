
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      // Configuration ultra-performante avec cache persistant
      staleTime: 5 * 60 * 1000, // 5 minutes (augment√©)
      gcTime: 30 * 60 * 1000, // 30 minutes (augment√©)
      refetchOnWindowFocus: false,
      refetchOnMount: false,
      refetchOnReconnect: false,
      refetchInterval: false,
      refetchIntervalInBackground: false,
      retry: (failureCount, error: any) => {
        // Ne pas retry sur les erreurs d'authentification
        if (error?.code === 'PGRST301' || error?.code === 'PGRST116') {
          return false;
        }
        return failureCount < 2; // Maximum 2 retries
      },
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
      networkMode: 'online',
      // Optimisation cruciale : √©viter les requ√™tes simultan√©es identiques
      structuralSharing: true,
    },
    mutations: {
      retry: 1,
      retryDelay: 1000,
      networkMode: 'online',
    }
  }
});

// Pr√©chargement intelligent des donn√©es critiques
export const preloadCriticalData = async () => {
  console.log('üöÄ Pr√©chargement des donn√©es critiques...');
  
  const criticalQueries = [
    { queryKey: ['ultra-catalogue'], priority: 'high' },
    { queryKey: ['ultra-config'], priority: 'high' },
    { queryKey: ['ultra-stock'], priority: 'medium' },
    { queryKey: ['ultra-clients'], priority: 'low' },
  ];

  // D√©marrer les requ√™tes critiques en parall√®le
  const promises = criticalQueries.map(async ({ queryKey, priority }) => {
    try {
      await queryClient.prefetchQuery({
        queryKey,
        staleTime: 5 * 60 * 1000,
      });
      console.log(`‚úÖ Donn√©es ${queryKey[0]} pr√©charg√©es (${priority})`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur pr√©chargement ${queryKey[0]}:`, error);
    }
  });

  await Promise.allSettled(promises);
  console.log('üéØ Pr√©chargement termin√©');
};
