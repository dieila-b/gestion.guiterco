
import { useState } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';

export const usePermissionsRefresh = () => {
  const [isRefreshing, setIsRefreshing] = useState(false);
  const queryClient = useQueryClient();

  const refreshAllData = async () => {
    if (isRefreshing) {
      console.log('üö´ Actualisation d√©j√† en cours, annulation...');
      return;
    }
    
    console.log('üîÑ D√©but de l\'actualisation compl√®te du syst√®me de permissions...');
    setIsRefreshing(true);
    
    try {
      // Invalider tous les caches li√©s aux permissions et √† la structure
      const queries = [
        'roles',
        'permissions', 
        'all-role-permissions',
        'role-permissions',
        'menus-permissions-structure',
        'user-permissions',
        'users-with-roles',
        'menus-structure'
      ];

      console.log('üóëÔ∏è Invalidation des caches:', queries);
      
      // Annuler toutes les requ√™tes en cours
      await queryClient.cancelQueries();
      
      // Invalider tous les caches de fa√ßon s√©quentielle
      for (const queryKey of queries) {
        await queryClient.invalidateQueries({ queryKey: [queryKey] });
      }
      
      // Attendre un court d√©lai avant le refetch
      await new Promise(resolve => setTimeout(resolve, 200));
      
      // Forcer le refetch des donn√©es principales en s√©quence
      const refetchPromises = [
        () => queryClient.refetchQueries({ queryKey: ['permissions'] }),
        () => queryClient.refetchQueries({ queryKey: ['roles'] }),
        () => queryClient.refetchQueries({ queryKey: ['all-role-permissions'] }),
        () => queryClient.refetchQueries({ queryKey: ['menus-permissions-structure'] }),
        () => queryClient.refetchQueries({ queryKey: ['users-with-roles'] })
      ];
      
      // Ex√©cuter les refetch en s√©quence pour √©viter la surcharge
      for (const refetchFn of refetchPromises) {
        await refetchFn();
        // Petit d√©lai entre chaque refetch
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      console.log('‚úÖ Actualisation du syst√®me de permissions termin√©e avec succ√®s');
      toast.success('Donn√©es actualis√©es avec succ√®s', {
        description: 'La structure compl√®te des permissions a √©t√© recharg√©e.'
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'actualisation du syst√®me de permissions:', error);
      toast.error('Erreur lors de l\'actualisation', {
        description: 'Impossible de recharger les donn√©es. Veuillez r√©essayer.'
      });
    } finally {
      setIsRefreshing(false);
    }
  };

  return {
    isRefreshing,
    refreshAllData
  };
};
