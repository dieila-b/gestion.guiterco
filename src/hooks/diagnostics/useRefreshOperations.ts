
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';
import { useQueryClient } from '@tanstack/react-query';

export const useRefreshOperations = () => {
  const queryClient = useQueryClient();

  const handleRefreshData = async () => {
    try {
      console.log('üîÑ Rafra√Æchissement des donn√©es de marges...');
      
      await queryClient.invalidateQueries({ queryKey: ['articles-with-margins'] });
      
      toast({
        title: "Donn√©es rafra√Æchies",
        description: "Les donn√©es de marges ont √©t√© recharg√©es depuis la base de donn√©es.",
      });
    } catch (error) {
      console.error('‚ùå Erreur lors du rafra√Æchissement:', error);
      toast({
        title: "Erreur de rafra√Æchissement",
        description: "Impossible de rafra√Æchir les donn√©es",
        variant: "destructive",
      });
    }
  };

  const handleForceRefreshView = async () => {
    try {
      console.log('üîÑ For√ßage du recalcul de la vue marges...');
      
      const { error } = await supabase.rpc('refresh_marges_view');
      
      if (error) {
        console.error('‚ùå Erreur lors du recalcul de la vue:', error);
        toast({
          title: "Erreur de recalcul",
          description: "Impossible de forcer le recalcul de la vue",
          variant: "destructive",
        });
        return;
      }

      await queryClient.invalidateQueries({ queryKey: ['articles-with-margins'] });
      
      toast({
        title: "Vue recalcul√©e",
        description: "La vue des marges a √©t√© forc√©e √† se recalculer. Les donn√©es sont maintenant √† jour.",
      });
    } catch (error) {
      console.error('‚ùå Erreur lors du recalcul forc√©:', error);
      toast({
        title: "Erreur",
        description: "Une erreur est survenue lors du recalcul forc√©",
        variant: "destructive",
      });
    }
  };

  return {
    handleRefreshData,
    handleForceRefreshView
  };
};
