
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

export const useDebugFrais = () => {
  const handleDebugFrais = async () => {
    try {
      console.log('üîç Lancement du debug des frais d√©taill√©...');
      
      const { data, error } = await supabase.rpc('debug_frais_articles_detaille');
      
      if (error) {
        console.error('‚ùå Erreur lors du debug des frais:', error);
        toast({
          title: "Erreur de debug",
          description: "Impossible de r√©cup√©rer les donn√©es de debug",
          variant: "destructive",
        });
        return;
      }

      console.log('üìä Donn√©es de debug des frais d√©taill√©es:', data);
      
      if (data && data.length > 0) {
        console.table(data);
        
        const totalArticles = new Set(data.map(d => d.article_id)).size;
        const articlesAvecFrais = data.filter(d => d.frais_total_bc > 0).length;
        const fraisTotalCalcule = data.reduce((sum, d) => sum + (d.part_frais || 0), 0);
        
        console.log(`üìà Statistiques debug d√©taill√©:`);
        console.log(`- Articles uniques: ${totalArticles}`);
        console.log(`- Lignes avec frais BC > 0: ${articlesAvecFrais}`);
        console.log(`- Total frais r√©partis: ${fraisTotalCalcule} GNF`);
        
        toast({
          title: "Debug des frais r√©ussi",
          description: `${data.length} enregistrements analys√©s. ${articlesAvecFrais} avec frais BC. Consultez la console pour les d√©tails.`,
        });
      } else {
        console.log('‚ö†Ô∏è Aucune donn√©e de frais trouv√©e');
        toast({
          title: "Aucune donn√©e trouv√©e",
          description: "Aucune donn√©e de frais trouv√©e. V√©rifiez que des bons de commande approuv√©s existent avec des frais.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du debug:', error);
      toast({
        title: "Erreur",
        description: "Une erreur est survenue lors du debug",
        variant: "destructive",
      });
    }
  };

  return { handleDebugFrais };
};
