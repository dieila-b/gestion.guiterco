
import { useState, useEffect, useMemo } from 'react';

export interface DevModeConfig {
  isDevMode: boolean;
  bypassAuth: boolean;
  mockUser: {
    id: string;
    email: string;
    prenom: string;
    nom: string;
    role: {
      nom: string;
      description: string;
    };
    statut: string;
    type_compte: string;
  };
  toggleBypass: () => void;
}

export const useDevMode = (): DevModeConfig => {
  // Stabiliser l'objet mockUser pour √©viter les re-renders
  const mockUser = useMemo(() => ({
    id: 'dev-user-123',
    email: 'dev@test.local',
    prenom: 'Admin',
    nom: 'D√©veloppement',
    role: {
      nom: 'administrateur',
      description: 'Administrateur d√©veloppement'
    },
    statut: 'actif',
    type_compte: 'interne'
  }), []);

  const [config, setConfig] = useState<DevModeConfig>(() => {
    // D√©tecter l'environnement de d√©veloppement
    const hostname = window.location.hostname;
    
    // En mode production sur lovableproject.com, ne pas consid√©rer comme dev
    const isLovablePreview = hostname.includes('lovableproject.com') || hostname.includes('lovableproject.app');
    
    // RESTAURATION D'URGENCE: Temporairement consid√©rer Lovable comme dev pour d√©bloquer l'acc√®s
    const isDev = hostname === 'localhost' || 
                  hostname.includes('127.0.0.1') ||
                  hostname.includes('.local') ||
                  isLovablePreview; // TEMPORAIRE - pour restaurer l'acc√®s

    let bypassEnabled = false;
    
    if (isDev) {
      // En mode d√©veloppement, activer le bypass par d√©faut pour faciliter les tests
      bypassEnabled = true;
      
      // Permettre √† l'utilisateur de d√©sactiver le bypass manuellement si n√©cessaire
      const manualOverride = localStorage.getItem('dev_bypass_auth');
      if (manualOverride === 'false') {
        bypassEnabled = false;
      }
      
      // V√©rifier aussi la variable d'environnement pour forcer l'activation/d√©sactivation
      if (import.meta.env.VITE_DEV_BYPASS_AUTH === 'false') {
        bypassEnabled = false;
      }
    }

    return {
      isDevMode: isDev,
      bypassAuth: bypassEnabled,
      mockUser,
      toggleBypass: () => {}
    };
  });

  const updateBypassState = () => {
    const hostname = window.location.hostname;
    
    // En mode production sur lovableproject.com, ne pas consid√©rer comme dev
    const isLovablePreview = hostname.includes('lovableproject.com') || hostname.includes('lovableproject.app');
    
    // RESTAURATION D'URGENCE: Temporairement consid√©rer Lovable comme dev pour d√©bloquer l'acc√®s
    const isDev = hostname === 'localhost' || 
                  hostname.includes('127.0.0.1') ||
                  hostname.includes('.local') ||
                  isLovablePreview; // TEMPORAIRE - pour restaurer l'acc√®s

    console.log('üîç D√©tection environnement:', {
      hostname,
      isDev,
      mode: import.meta.env.MODE,
      dev: import.meta.env.DEV
    });

    let bypassEnabled = false;
    
    if (isDev) {
      // En mode d√©veloppement, bypass activ√© par d√©faut
      bypassEnabled = true;
      
      const manualOverride = localStorage.getItem('dev_bypass_auth');
      
      // L'utilisateur peut d√©sactiver manuellement le bypass
      if (manualOverride === 'false') {
        bypassEnabled = false;
        console.log('üîí Bypass d\'authentification d√©sactiv√© manuellement');
      } else {
        console.log('üöÄ Bypass d\'authentification activ√© par d√©faut (mode dev)');
      }
      
      // V√©rifier aussi la variable d'environnement
      if (import.meta.env.VITE_DEV_BYPASS_AUTH === 'false') {
        bypassEnabled = false;
      }
      
      console.log('üîß Configuration bypass:', { 
        manualOverride, 
        bypassEnabled,
        envVar: import.meta.env.VITE_DEV_BYPASS_AUTH 
      });
    } else {
      // En production, authentification toujours requise
      console.log('üè¢ Mode production: Authentification obligatoire');
    }

    setConfig(prevConfig => ({
      ...prevConfig,
      isDevMode: isDev,
      bypassAuth: bypassEnabled,
      mockUser,
      toggleBypass: () => {
        if (!isDev) {
          console.log('‚ùå Toggle bypass non disponible en production');
          return;
        }
        
        const current = localStorage.getItem('dev_bypass_auth') !== 'false';
        const newValue = !current;
        
        if (newValue) {
          // Activer le bypass - supprimer la cl√© ou la mettre √† 'true'
          localStorage.removeItem('dev_bypass_auth');
        } else {
          // D√©sactiver le bypass
          localStorage.setItem('dev_bypass_auth', 'false');
        }
        
        console.log(`üîÑ Bypass auth ${newValue ? 'activ√©' : 'd√©sactiv√©'}`);
        
        // Recharger la page pour appliquer les changements
        window.location.reload();
      }
    }));
  };

  useEffect(() => {
    // Mettre √† jour imm√©diatement
    updateBypassState();
    
    // √âcouter les changements du localStorage
    const handleStorageChange = () => {
      updateBypassState();
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [mockUser]); // Ajouter mockUser comme d√©pendance

  return config;
};
