
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';
import type { CreateFactureVenteData } from './types';
import { createFactureAndLines } from './services/factureCreationService';
import { processPayment } from './services/paymentProcessingService';
import { processDelivery } from './services/deliveryProcessingService';
import { updateStockPDV } from './services/stockUpdateService';

export const useCreateFactureVente = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: CreateFactureVenteData & { payment_data?: any }) => {
      console.log('üîÑ Cr√©ation facture de vente - d√©but du processus');
      
      // PROTECTION: V√©rifier qu'on ne cr√©e pas de doublons
      const timestamp = Date.now();
      const uniqueRef = `creation-${timestamp}`;
      console.log('üÜî R√©f√©rence unique pour cette cr√©ation:', uniqueRef);

      // 1. Cr√©er la facture et ses lignes
      const { facture, lignes: lignesCreees } = await createFactureAndLines(data);
      console.log('‚úÖ Facture cr√©√©e:', facture.id);

      // 2. Traiter le paiement SEULEMENT s'il y en a un
      if (data.payment_data) {
        console.log('üí∞ Traitement du paiement...');
        await processPayment(data.payment_data, facture);
      }

      // 3. Traiter la livraison SEULEMENT si confirm√©e
      if (data.payment_data?.confirm_delivery) {
        console.log('üì¶ Traitement de la livraison...');
        await processDelivery(data.payment_data, facture, lignesCreees);
      }

      // 4. Mettre √† jour le stock PDV seulement si sp√©cifi√©
      if (data.point_vente_id) {
        console.log('üì¶ Mise √† jour stock PDV...');
        await updateStockPDV(data, facture);
      }

      console.log('üéâ Processus de cr√©ation termin√© avec succ√®s');
      return { facture, lignes: lignesCreees };
    },
    onSuccess: () => {
      console.log('‚úÖ Facture de vente cr√©√©e avec statuts corrects');
      
      // Invalider toutes les queries li√©es
      queryClient.invalidateQueries({ queryKey: ['factures_vente'] });
      queryClient.invalidateQueries({ queryKey: ['stock-pdv'] });
      queryClient.invalidateQueries({ queryKey: ['transactions'] });
      queryClient.invalidateQueries({ queryKey: ['cash_registers'] });
      queryClient.invalidateQueries({ queryKey: ['all-financial-transactions'] });
      queryClient.invalidateQueries({ queryKey: ['cash-register-balance'] });
      queryClient.invalidateQueries({ queryKey: ['complete-transaction-history'] });
      
      // Forcer le refetch imm√©diat des donn√©es critiques
      queryClient.refetchQueries({ queryKey: ['complete-transaction-history'] });
      
      toast.success('Facture cr√©√©e avec succ√®s');
    },
    onError: (error: Error) => {
      console.error('‚ùå Erreur lors de la cr√©ation de la facture:', error);
      toast.error('Erreur lors de la cr√©ation de la facture');
    }
  });
};
