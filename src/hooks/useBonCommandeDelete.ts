
import { toast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useBonsCommande } from '@/hooks/useBonsCommande';

export const useBonCommandeDelete = () => {
  const { deleteBonCommande } = useBonsCommande();

  const handleDelete = async (id: string) => {
    if (window.confirm('√ätes-vous s√ªr de vouloir supprimer ce bon de commande ? Cette action supprimera √©galement tous les √©l√©ments li√©s (bons de livraison, articles).')) {
      try {
        console.log('üóëÔ∏è Suppression du bon de commande et √©l√©ments li√©s:', id);
        
        // V√©rifier s'il existe des bons de livraison li√©s
        const { data: bonsLivraisonLies } = await supabase
          .from('bons_de_livraison')
          .select('id, numero_bon, statut')
          .eq('bon_commande_id', id);

        if (bonsLivraisonLies && bonsLivraisonLies.length > 0) {
          const numerosBL = bonsLivraisonLies.map(bl => bl.numero_bon).join(', ');
          console.log('‚ö†Ô∏è Bons de livraison li√©s trouv√©s:', numerosBL);
          
          if (!window.confirm(`Attention: Cette suppression affectera √©galement ${bonsLivraisonLies.length} bon(s) de livraison (${numerosBL}). Continuer ?`)) {
            return;
          }
        }

        await deleteBonCommande.mutateAsync(id);
        
        toast({
          title: "‚úÖ Bon de commande supprim√©",
          description: `Le bon de commande et tous ses √©l√©ments li√©s ont √©t√© supprim√©s. Tra√ßabilit√© mise √† jour.`,
          variant: "default",
        });
        
        console.log('‚úÖ Suppression termin√©e avec mise √† jour de la tra√ßabilit√©');
      } catch (error) {
        console.error('‚ùå Erreur lors de la suppression:', error);
        toast({
          title: "‚ùå Erreur de suppression",
          description: "Erreur lors de la suppression du bon de commande.",
          variant: "destructive",
        });
      }
    }
  };

  return { handleDelete };
};
