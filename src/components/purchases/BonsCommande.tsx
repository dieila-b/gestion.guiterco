
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Search } from 'lucide-react';
import { useBonsCommande } from '@/hooks/useBonsCommande';
import { useBonsLivraison } from '@/hooks/useBonsLivraison';
import { useAllBonCommandeArticles } from '@/hooks/useBonCommandeArticles';
import { format } from 'date-fns';
import { CreateBonCommandeDialog } from './CreateBonCommandeDialog';
import { BonCommandeTable } from './BonCommandeTable';
import { toast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

const BonsCommande = () => {
  const { bonsCommande, isLoading, updateBonCommande, deleteBonCommande } = useBonsCommande();
  const { createBonLivraison } = useBonsLivraison();
  const { data: articlesCounts, isLoading: loadingArticles } = useAllBonCommandeArticles();
  const [searchTerm, setSearchTerm] = useState('');

  const handleApprove = async (id: string, bon: any) => {
    try {
      console.log('üîÑ D√©but de l\'approbation du bon de commande:', id, bon);
      
      // 1. Mettre √† jour le statut du bon de commande √† 'valide' avec v√©rification d'int√©grit√©
      console.log('üìù Mise √† jour du statut du bon de commande...');
      await updateBonCommande.mutateAsync({
        id,
        statut: 'valide'
      });

      // 2. R√©cup√©rer les articles du bon de commande avec validation des donn√©es
      console.log('üì¶ R√©cup√©ration des articles du bon de commande...');
      const { data: articlesCommande, error: articlesError } = await supabase
        .from('articles_bon_commande')
        .select(`
          *,
          article:catalogue(
            id,
            nom,
            reference,
            prix_unitaire
          )
        `)
        .eq('bon_commande_id', id);

      if (articlesError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des articles:', articlesError);
        throw new Error(`Erreur de r√©cup√©ration des articles: ${articlesError.message}`);
      }

      if (!articlesCommande || articlesCommande.length === 0) {
        throw new Error('Aucun article trouv√© pour ce bon de commande');
      }

      console.log('‚úÖ Articles r√©cup√©r√©s avec succ√®s:', articlesCommande.length, 'articles');

      // 3. G√©n√©rer le num√©ro de bon de livraison synchronis√© avec validation
      console.log('üî¢ G√©n√©ration du num√©ro de bon de livraison synchronis√©...');
      const { data: numeroBLResult, error: numeroBLError } = await supabase
        .rpc('generate_bon_livraison_number', { 
          bon_commande_numero: bon.numero_bon 
        });

      if (numeroBLError) {
        console.error('‚ùå Erreur lors de la g√©n√©ration du num√©ro BL:', numeroBLError);
        throw new Error(`Erreur de g√©n√©ration du num√©ro BL: ${numeroBLError.message}`);
      }

      const numeroBonLivraison = numeroBLResult;
      console.log('üéØ Num√©ro BL g√©n√©r√© avec synchronisation:', numeroBonLivraison);
      
      // 4. Cr√©er le bon de livraison avec toutes les donn√©es de tra√ßabilit√©
      const bonLivraisonData = {
        numero_bon: numeroBonLivraison,
        bon_commande_id: id,
        fournisseur: bon.fournisseur,
        date_livraison: new Date().toISOString(),
        statut: 'en_transit',
        taux_tva: bon.taux_tva || 20,
        transit_douane: bon.transit_douane || 0
      };

      console.log('üìã Cr√©ation du bon de livraison avec donn√©es compl√®tes:', bonLivraisonData);

      const newBonLivraison = await createBonLivraison.mutateAsync(bonLivraisonData);
      
      console.log('‚úÖ Bon de livraison cr√©√© avec succ√®s:', newBonLivraison);

      // 5. Transf√©rer tous les articles avec v√©rification d'int√©grit√©
      if (articlesCommande && articlesCommande.length > 0) {
        console.log('üîÑ Transfert des articles vers le bon de livraison...');
        
        const articlesLivraison = articlesCommande.map(article => ({
          bon_livraison_id: newBonLivraison.id,
          article_id: article.article_id,
          quantite_commandee: article.quantite,
          quantite_recue: 0, // Initialement 0, sera mise √† jour lors de la r√©ception
          prix_unitaire: article.prix_unitaire,
          montant_ligne: article.montant_ligne
        }));

        console.log('üìä Articles √† transf√©rer:', articlesLivraison);

        const { error: insertArticlesError } = await supabase
          .from('articles_bon_livraison')
          .insert(articlesLivraison);

        if (insertArticlesError) {
          console.error('‚ùå Erreur lors du transfert des articles:', insertArticlesError);
          throw new Error(`Erreur de transfert des articles: ${insertArticlesError.message}`);
        }

        console.log('‚úÖ Transfert des articles termin√© avec succ√®s');
      }

      // 6. V√©rification finale de l'int√©grit√© des donn√©es
      console.log('üîç V√©rification de l\'int√©grit√© de la liaison...');
      const { data: verification, error: verificationError } = await supabase
        .from('bons_de_livraison')
        .select(`
          *,
          bon_commande:bons_de_commande!fk_bons_livraison_bon_commande_id(numero_bon)
        `)
        .eq('id', newBonLivraison.id)
        .single();

      if (verificationError || !verification) {
        console.error('‚ùå Erreur de v√©rification de l\'int√©grit√©:', verificationError);
        throw new Error('Erreur de v√©rification de l\'int√©grit√© des donn√©es');
      }

      console.log('‚úÖ V√©rification d\'int√©grit√© r√©ussie:', verification);
      
      toast({
        title: "‚úÖ Bon de commande approuv√© avec succ√®s",
        description: `Bon de livraison ${numeroBonLivraison} g√©n√©r√© automatiquement. Tra√ßabilit√© compl√®te assur√©e avec ${articlesCommande?.length || 0} articles synchronis√©s.`,
        variant: "default",
      });

      console.log('üéØ Approbation termin√©e - Cha√Æne de tra√ßabilit√©: BC ‚Üí BL ‚Üí Articles compl√®te');
      
    } catch (error) {
      console.error('‚ùå Erreur critique lors de l\'approbation:', error);
      toast({
        title: "‚ùå Erreur d'approbation",
        description: error instanceof Error ? error.message : "Erreur lors de l'approbation du bon de commande. Veuillez r√©essayer.",
        variant: "destructive",
      });
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('√ätes-vous s√ªr de vouloir supprimer ce bon de commande ? Cette action supprimera √©galement tous les √©l√©ments li√©s (bons de livraison, articles).')) {
      try {
        console.log('üóëÔ∏è Suppression du bon de commande et √©l√©ments li√©s:', id);
        
        // V√©rifier s'il existe des bons de livraison li√©s
        const { data: bonsLivraisonLies } = await supabase
          .from('bons_de_livraison')
          .select('id, numero_bon, statut')
          .eq('bon_commande_id', id);

        if (bonsLivraisonLies && bonsLivraisonLies.length > 0) {
          const numerosBL = bonsLivraisonLies.map(bl => bl.numero_bon).join(', ');
          console.log('‚ö†Ô∏è Bons de livraison li√©s trouv√©s:', numerosBL);
          
          if (!window.confirm(`Attention: Cette suppression affectera √©galement ${bonsLivraisonLies.length} bon(s) de livraison (${numerosBL}). Continuer ?`)) {
            return;
          }
        }

        await deleteBonCommande.mutateAsync(id);
        
        toast({
          title: "‚úÖ Bon de commande supprim√©",
          description: `Le bon de commande et tous ses √©l√©ments li√©s ont √©t√© supprim√©s. Tra√ßabilit√© mise √† jour.`,
          variant: "default",
        });
        
        console.log('‚úÖ Suppression termin√©e avec mise √† jour de la tra√ßabilit√©');
      } catch (error) {
        console.error('‚ùå Erreur lors de la suppression:', error);
        toast({
          title: "‚ùå Erreur de suppression",
          description: "Erreur lors de la suppression du bon de commande.",
          variant: "destructive",
        });
      }
    }
  };

  const filteredBons = bonsCommande?.filter(bon =>
    bon.numero_bon.toLowerCase().includes(searchTerm.toLowerCase()) ||
    bon.fournisseur.toLowerCase().includes(searchTerm.toLowerCase())
  ) || [];

  if (isLoading) {
    return <div className="flex justify-center py-8">Chargement...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-white">Bons de commande</h2>
          <p className="text-gray-400">G√©rez vos bons de commande fournisseurs avec num√©rotation automatique BC-AA-MM-JJ-XXX et g√©n√©ration automatique des bons de livraison</p>
        </div>
        <CreateBonCommandeDialog />
      </div>

      <Card className="bg-gray-800 border-gray-700">
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <CardTitle className="text-white">Liste des bons de commande</CardTitle>
            <div className="flex items-center space-x-2">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="Rechercher par num√©ro ou fournisseur..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 bg-gray-700 border-gray-600 text-white"
                />
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <BonCommandeTable
            bons={filteredBons}
            articlesCounts={articlesCounts || {}}
            onApprove={handleApprove}
            onDelete={handleDelete}
          />
          
          {filteredBons.length === 0 && (
            <div className="text-center py-8 text-gray-400">
              {searchTerm ? 'Aucun r√©sultat trouv√©' : 'Aucun bon de commande trouv√©'}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default BonsCommande;
