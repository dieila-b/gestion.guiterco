
import { Transaction } from '../types';

export const getTransactionTypeDetails = (source: string | null, type: 'income' | 'expense', description?: string) => {
  console.log('üîç getTransactionTypeDetails appel√©e avec:', { source, type, description });
  
  // Premi√®re v√©rification : r√®glement de facture (paiement d'un solde d√ª)
  if (source === "facture" || source === "r√®glement" || source === "Paiement d'un impay√©") {
    console.log('‚úÖ R√®glement de facture d√©tect√© via source !');
    return {
      label: "R√®glement Facture",
      className: "bg-orange-50 text-orange-700",
      textColor: "text-orange-700",
      sourceDisplay: "r√®glement"
    };
  }

  // Deuxi√®me v√©rification : d√©tection par la description (fallback pour les r√®glements)
  if (description && (
    description.toLowerCase().includes("r√®glement") ||
    description.toLowerCase().includes("versement") ||
    description.toLowerCase().includes("impay√©") ||
    description.toLowerCase().includes("paiement facture")
  )) {
    console.log('‚úÖ R√®glement de facture d√©tect√© via description !', description);
    return {
      label: "R√®glement Facture",
      className: "bg-orange-50 text-orange-700",
      textColor: "text-orange-700",
      sourceDisplay: "r√®glement"
    };
  }

  // Troisi√®me v√©rification : vente imm√©diate (source explicite)
  if (source === "vente" || source === "Vente encaiss√©e") {
    console.log('‚úÖ Vente imm√©diate d√©tect√©e via source');
    return {
      label: "Vente",
      className: "bg-green-50 text-green-700",
      textColor: "text-green-700",
      sourceDisplay: "vente"
    };
  }

  // Quatri√®me v√©rification : vente d√©tect√©e par description
  if (type === 'income' && description && (
    description.toLowerCase().includes("vente") ||
    description.toLowerCase().includes("fa-") // num√©ro de facture
  )) {
    console.log('‚úÖ Vente d√©tect√©e via description');
    return {
      label: "Vente",
      className: "bg-green-50 text-green-700",
      textColor: "text-green-700",
      sourceDisplay: "vente"
    };
  }

  // Gestion des autres types (entr√©es manuelles, sorties, etc.)
  const normalizedSource = source?.trim().toLowerCase();
  
  switch (normalizedSource) {
    case 'entr√©e manuelle':
      return {
        label: 'Entr√©e',
        className: 'bg-blue-50 text-blue-700',
        textColor: "text-blue-700",
        sourceDisplay: "entr√©e manuelle"
      };
    case 'sortie':
    case 'sortie manuelle':
      return {
        label: 'Sortie',
        className: 'bg-red-50 text-red-700',
        textColor: "text-red-700",
        sourceDisplay: "sortie manuelle"
      };
    default:
      // Logique de fallback
      if (type === 'expense') {
        return { 
          label: 'Sortie', 
          className: 'bg-red-50 text-red-700', 
          textColor: "text-red-700",
          sourceDisplay: "sortie" 
        };
      }
      // Pour les revenus sans classification claire, on assume que c'est une vente
      return { 
        label: 'Vente', 
        className: 'bg-green-50 text-green-700', 
        textColor: "text-green-700",
        sourceDisplay: "vente" 
      };
  }
};
